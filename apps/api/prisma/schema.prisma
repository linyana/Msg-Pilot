generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model tenants {
  id            BigInt          @id @default(autoincrement())
  unit_id       String          @unique @default(cuid())
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  updated_at    DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  name          String          @db.VarChar(255)
  email         String          @unique @db.VarChar(255)
  phone         String          @db.VarChar(255)
  sub_domain    String?         @db.VarChar(255)
  user          users[]
  user_logs     user_logs[]
  connections   connections[]
  accounts      accounts[]
  tasks         tasks[]
  task_accounts task_accounts[]
  messages      messages[]

  @@index([email], map: "merchant_email")
}

model users {
  id         BigInt      @id @default(autoincrement())
  unit_id    String      @unique @default(cuid())
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  updated_at DateTime    @default(now()) @updatedAt @db.Timestamptz(6)
  name       String      @db.VarChar(255)
  email      String      @unique @db.VarChar(255)
  password   String      @db.VarChar(255)
  tenant_id  BigInt
  tenants    tenants     @relation(fields: [tenant_id], references: [id])
  user_logs  user_logs[]

  @@index([email], map: "tenant_email")
}

enum CONNECTION_TYPE {
  Red
}

model connections {
  id            BigInt          @id @default(autoincrement())
  unit_id       String          @unique @default(cuid())
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  updated_at    DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  name          String          @db.VarChar(255)
  description   String?
  type          CONNECTION_TYPE
  tenant_id     BigInt
  tenant        tenants         @relation(fields: [tenant_id], references: [id])
  accounts      accounts[]
  tasks         tasks[]
  task_accounts task_accounts[]
  messages      messages[]
}

enum ACCOUNT_STATUS {
  UNUSED
  UPDATED
  ACTIVE
  EXPIRED
  DISABLED
  DELETED
}

model accounts {
  id              BigInt          @id @default(autoincrement())
  unit_id         String          @unique @default(cuid())
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  name            String          @db.VarChar(255)
  cookie          String?
  description     String?
  status          ACCOUNT_STATUS  @default(UNUSED)
  last_expired_at DateTime?
  connection_id   BigInt
  tenant_id       BigInt
  connection      connections     @relation(fields: [connection_id], references: [id])
  tenant          tenants         @relation(fields: [tenant_id], references: [id])
  task_accounts   task_accounts[]
  messages        messages[]
}

enum TASK_STATUS {
  NOT_START
  WAITING
  RUNNING
  FAILED
  COMPLETED
  PARTIAL_COMPLETED
}

enum TASK_TYPE {
  NOTE_COMMENT
}

enum DISTRIBUTION_RULE {
  ACCOUNT_UNIQUE
}

model tasks {
  id                  BigInt            @id @default(autoincrement())
  unit_id             String            @unique @default(cuid())
  created_at          DateTime          @default(now()) @db.Timestamptz(6)
  updated_at          DateTime          @default(now()) @updatedAt @db.Timestamptz(6)
  name                String            @db.VarChar(255)
  description         String?
  status              TASK_STATUS       @default(NOT_START)
  failed_reason       Json?
  data                Json?
  is_search_completed Boolean           @default(false)
  sent_count          Int               @default(0)
  found_count         Int               @default(0)
  expect_count        Int               @default(0)
  connection_id       BigInt
  tenant_id           BigInt
  type                TASK_TYPE         @default(NOTE_COMMENT)
  destribution_rule   DISTRIBUTION_RULE @default(ACCOUNT_UNIQUE)
  connection          connections       @relation(fields: [connection_id], references: [id])
  tenant              tenants           @relation(fields: [tenant_id], references: [id])
  task_accounts       task_accounts[]
  messages            messages[]
}

model task_accounts {
  id            BigInt      @id @default(autoincrement())
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime    @default(now()) @updatedAt @db.Timestamptz(6)
  account_id    BigInt
  task_id       BigInt
  connection_id BigInt
  tenant_id     BigInt
  connection    connections @relation(fields: [connection_id], references: [id])
  tenant        tenants     @relation(fields: [tenant_id], references: [id])
  account       accounts    @relation(fields: [account_id], references: [id])
  task          tasks       @relation(fields: [task_id], references: [id])
}

model messages {
  id               BigInt      @id @default(autoincrement())
  unit_id          String      @unique @default(cuid())
  created_at       DateTime    @default(now()) @db.Timestamptz(6)
  updated_at       DateTime    @default(now()) @updatedAt @db.Timestamptz(6)
  started_at       DateTime    @default(now()) @db.Timestamptz(6)
  ended_at         DateTime    @default(now()) @db.Timestamptz(6)
  is_sended        Boolean     @default(false)
  status           TASK_STATUS @default(NOT_START)
  failed_reason    Json?
  platform_unit_id String?
  platform_name    String?
  platform_data    Json?
  connection_id    BigInt
  tenant_id        BigInt
  task_id          BigInt
  account_id       BigInt?
  account          accounts?   @relation(fields: [account_id], references: [id])
  task             tasks       @relation(fields: [task_id], references: [id])
  connection       connections @relation(fields: [connection_id], references: [id])
  tenant           tenants     @relation(fields: [tenant_id], references: [id])
}

model user_logs {
  id           BigInt   @id @default(autoincrement())
  unit_id      String   @unique @default(cuid())
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  module       Int?
  merchant_id  BigInt
  user_id      BigInt
  feature      String?  @db.VarChar(255)
  actions_type Int?
  from         Json?
  to           Json?
  user         users    @relation(fields: [user_id], references: [id])
  tenant       tenants  @relation(fields: [merchant_id], references: [id])
}
